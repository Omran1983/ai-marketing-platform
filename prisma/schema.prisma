// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Tenant {
  id          String   @id @default(cuid())
  name        String
  domain      String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  users       User[]
  products    Product[]
  campaigns   Campaign[]
  apiKeys     ApiKey[]
  auditLogs   AuditLog[]
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(VIEWER)
  tenantId      String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  tenant        Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  accounts      Account[]
  sessions      Session[]
  campaigns     Campaign[]
  auditLogs     AuditLog[]
}

enum UserRole {
  ADMIN
  EDITOR
  VIEWER
}

model ApiKey {
  id          String   @id @default(cuid())
  name        String
  key         String   @unique
  tenantId    String
  isActive    Boolean  @default(true)
  lastUsed    DateTime?
  createdAt   DateTime @default(now())
  
  tenant      Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

model Product {
  id          String   @id @default(cuid())
  name        String
  description String?
  price       Float
  imageUrl    String?
  category    String?
  tenantId    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tenant          Tenant           @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  campaignProducts CampaignProduct[]
}

model Creative {
  id          String      @id @default(cuid())
  type        CreativeType
  content     String      // JSON content for image/copy data
  prompt      String?
  status      CreativeStatus @default(PENDING)
  tenantId    String
  createdAt   DateTime    @default(now())
  
  campaigns   Campaign[]
}

enum CreativeType {
  IMAGE
  COPY
  VIDEO
}

enum CreativeStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
}

model Campaign {
  id          String        @id @default(cuid())
  name        String
  description String?
  budget      Float
  audience    String        // JSON audience targeting data
  status      CampaignStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  createdById String
  tenantId    String
  creativeId  String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  tenant      Tenant          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  createdBy   User            @relation(fields: [createdById], references: [id])
  creative    Creative?       @relation(fields: [creativeId], references: [id])
  products    CampaignProduct[]
  jobs        ScheduledJob[]
  analytics   Analytics[]
}

enum CampaignStatus {
  DRAFT
  SCHEDULED
  RUNNING
  PAUSED
  COMPLETED
  CANCELLED
}

model CampaignProduct {
  id         String  @id @default(cuid())
  campaignId String
  productId  String
  
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, productId])
}

model ScheduledJob {
  id          String    @id @default(cuid())
  jobId       String    @unique // BullMQ job ID
  type        JobType
  payload     String    // JSON payload
  status      JobStatus @default(PENDING)
  scheduledAt DateTime
  processedAt DateTime?
  error       String?
  campaignId  String?
  createdAt   DateTime  @default(now())
  
  campaign    Campaign? @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

enum JobType {
  CAMPAIGN_START
  CAMPAIGN_STOP
  CAMPAIGN_UPDATE
  CREATIVE_GENERATION
  ANALYTICS_SYNC
}

enum JobStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

model Analytics {
  id          String   @id @default(cuid())
  campaignId  String
  date        DateTime
  impressions Int      @default(0)
  clicks      Int      @default(0)
  conversions Int      @default(0)
  spend       Float    @default(0)
  revenue     Float    @default(0)
  createdAt   DateTime @default(now())
  
  campaign    Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  
  @@unique([campaignId, date])
}

model AuditLog {
  id        String     @id @default(cuid())
  userId    String
  tenantId  String
  action    AuditAction
  resource  String     // e.g., "product", "campaign", "user"
  resourceId String?
  details   String?    // JSON details
  ipAddress String?
  userAgent String?
  createdAt DateTime   @default(now())
  
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant    Tenant     @relation(fields: [tenantId], references: [id], onDelete: Cascade)
}

enum AuditAction {
  CREATE
  UPDATE
  DELETE
  VIEW
  LOGIN
  LOGOUT
}
